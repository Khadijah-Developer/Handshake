{"ast":null,"code":"var _jsxFileName = \"/Users/kadojali/Desktop/Projects/w13/Day03/Handshake/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport Chat from './components/Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n    socket.on('Welcome', data => console.log(data)); // note that we're returning a callback function\n    // this ensures that the underlying socket will be closed if App is unmounted\n    // this would be more critical if we were creating the socket in a subcomponent\n\n    return () => socket.disconnect(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Socket Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","Chat","App","console","log","socket","on","data","disconnect"],"sources":["/Users/kadojali/Desktop/Projects/w13/Day03/Handshake/client/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\n\nimport Chat from './components/Chat';\n\nfunction App() {\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n \n \n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n    socket.on('Welcome', data => console.log(data));\n \n    // note that we're returning a callback function\n    // this ensures that the underlying socket will be closed if App is unmounted\n    // this would be more critical if we were creating the socket in a subcomponent\n    return () => socket.disconnect(true);\n  }, []);\n  return (\n    <div className=\"App\">\n     <h1>Socket Test</h1>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,WAAP;AAGA,OAAOC,IAAP,MAAiB,mBAAjB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EAGAH,SAAS,CAAC,MAAM;IACd;IACA;IACAI,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACAC,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqBC,IAAI,IAAIJ,OAAO,CAACC,GAAR,CAAYG,IAAZ,CAA7B,EAJc,CAMd;IACA;IACA;;IACA,OAAO,MAAMF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAb;EACD,CAVQ,EAUN,EAVM,CAAT;EAWA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GArBQN,G;;KAAAA,G;AAuBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}